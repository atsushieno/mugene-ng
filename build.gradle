import com.strumenta.antlrkotlin.gradleplugin.AntlrKotlinTask
import org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTargetWithTests

buildscript {

    repositories {
        mavenCentral()
        mavenLocal()
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath('com.strumenta.antlr-kotlin:antlr-kotlin-gradle-plugin:-SNAPSHOT')
    }
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.4.31'
    id 'antlr'
}

group = 'dev.atsushieno'
version = '0.1.0-SNAPSHOT'

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://jitpack.io' }
}

kotlin {
    jvm {
        compilations.all {
            kotlinOptions.jvmTarget = '1.8'
        }
        testRuns["test"].executionTask.configure {
            useJUnit()
        }
    }
    js(LEGACY) {
        browser {
            testTask {
                useKarma {
                    useChromeHeadless()
                    webpackConfig.cssSupport.enabled = true
                }
            }
        }
    }
    def hostOs = System.getProperty("os.name")
    def isMingwX64 = hostOs.startsWith("Windows")
    KotlinNativeTargetWithTests nativeTarget
    if (hostOs == "Mac OS X") nativeTarget = macosX64('native')
    else if (hostOs == "Linux") nativeTarget = linuxX64("native")
    else if (isMingwX64) nativeTarget = mingwX64("native")
    else throw new GradleException("Host OS is not supported in Kotlin/Native.")

    
    sourceSets {
        commonAntlr {
            dependencies {
                api kotlin('stdlib-common')
                implementation ('com.strumenta.antlr-kotlin:antlr-kotlin-runtime:-SNAPSHOT')
            }
            kotlin.srcDir("build/generated-src/commonAntlr/kotlin")
        }

        commonMain {
            dependsOn(commonAntlr)
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation("dev.atsushieno:ktmidi-jvm:0.1.2")
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test-junit')
            }
        }
        jsMain {
            dependencies {
                implementation("dev.atsushieno:ktmidi-js:0.1.2")
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
        nativeMain {
            dependencies {
                implementation("dev.atsushieno:ktmidi-native:0.1.2")
            }
        }
        nativeTest {

        }
        generated {
            kotlin.srcDir 'generated-src/antlr/'
        }
    }

    compileKotlinJvm {
        source sourceSets.generated.kotlin, sourceSets.jvmMain.kotlin
    }
}

task generateKotlinCommonGrammarSource(type: AntlrKotlinTask) {
    def fc = project.buildscript.configurations.classpath.filter { true }
    antlrClasspath fc
    maxHeapSize "64m"
    packageName "com.strumenta.antlrkotlin.examples"
    arguments += ["-no-visitor", "-no-listener"]
    source {
        files(new File("src/commonAntlr/antlr").listFiles())
    }
    // outputDirectory is required, put it into the build directory
    // if you do not want to add the generated sources to version control
    outputDirectory new File("build/generated-src/commonAntlr/kotlin")
}

compileKotlinJvm.dependsOn("generateKotlinCommonGrammarSource")

