// The following variable is implicitly declared:
// #variable __timeline_position:number
// #variable __base_count:number=192 // it is read-only.
// The following variable is explicitly declared, but used by some expressions
// #variable __length:length // used by '^' operator.

// timeline operation:
#macro NOP val:number { __LET {"__timeline_position", $__timeline_position + $val } }
#macro JUMP val:length { __LET{"__timeline_position", $val} }
#macro REWIND val:length { __LET {"__timeline_position", $__timeline_position - $val} }

#macro | { } // It can be used as a "bar"

// They should go before primitive MIDI operation definitions
#variable __channel:number = 0
#variable __dummy_step:number
#variable __length:length = 4
#macro CH val:number { __LET {"__channel", $val - 1} } // CH1-CH16 are valid.
#macro DEBUG val { __PRINT {$val} }
#variable __dummy_msg:string
#macro ASSERT_STEP val:number,label:string { \
	__LET {"__dummy_step", $__timeline_position - $val } \
	__FORMAT { "__dummy_msg", \
		"WARNING: step assertion failed. Label: {0}, expected position: {1}, actual: {2}.", \
		$label, $val, $__dummy_step } \
	DEBUG $__dummy_step ? $__dummy_msg, "" \
	}

// primitive variables used in primitive macro operations
#variable __octave:number = 4
#variable __trans:number
#variable __trans_c:number
#variable __trans_d:number
#variable __trans_e:number
#variable __trans_f:number
#variable __trans_g:number
#variable __trans_a:number
#variable __trans_b:number
#variable __timing:number = 0
#variable __velocity:number = 100
#variable __velocity_sense:number = 4
#variable __gate_rel:number = 8
#variable __gate_rel_denom:number = 8
#variable __gate_abs:number
#variable __current_note_step:number = 0 // temporary (work) variable
#variable __current_note_gate:number = 0 // temporary (work) variable

// Primitive MIDI operations
// NON (8n), NOFF (9n), PAF (An), CC (Bn), PROGRAM (Cn), CAF (Dn), PITCH (En), EX (F0,F7), META (FF)

#macro NOFF key:number,vel:number { __MIDI {#80 + $__channel, $key, $vel} }
#macro NON key:number,vel:number { __MIDI {#90 + $__channel, $key, $vel} }
#macro PAF key:number,vel:number { __MIDI {#A0 + $__channel, $key, $vel} }
#macro CC opcode:number, val:number { __MIDI {#B0 + $__channel, $opcode, $val} }
#macro PROGRAM val:number { __MIDI {#C0 + $__channel, $val, 0} }
#macro CAF val:number { __MIDI {#D0 + $__channel, $val, 0} }
#macro PITCH val:number { __MIDI {#E0 + $__channel, $val % #80, $val / #80} }

// Variable storage
#macro l val:length { __LET{"__length", $val} }
#macro K val:number { __LET{"__trans", $val} }
#macro Kc+ { __LET{"__trans_c", 1} }
#macro Kd+ { __LET{"__trans_d", 1} }
#macro Ke+ { __LET{"__trans_e", 1} }
#macro Kf+ { __LET{"__trans_f", 1} }
#macro Kg+ { __LET{"__trans_g", 1} }
#macro Ka+ { __LET{"__trans_a", 1} }
#macro Kb+ { __LET{"__trans_b", 1} }
#macro Kc- { __LET{"__trans_c", -1} }
#macro Kd- { __LET{"__trans_d", -1} }
#macro Ke- { __LET{"__trans_e", -1} }
#macro Kf- { __LET{"__trans_f", -1} }
#macro Kg- { __LET{"__trans_g", -1} }
#macro Ka- { __LET{"__trans_a", -1} }
#macro Kb- { __LET{"__trans_b", -1} }
#macro Kc= { __LET{"__trans_c", 0} }
#macro Kd= { __LET{"__trans_d", 0} }
#macro Ke= { __LET{"__trans_e", 0} }
#macro Kf= { __LET{"__trans_f", 0} }
#macro Kg= { __LET{"__trans_g", 0} }
#macro Ka= { __LET{"__trans_a", 0} }
#macro Kb= { __LET{"__trans_b", 0} }
#macro VELOCITY_SENSE val:number { __LET{"__velocity_sense", $val } }
#macro v val:number { __LET{"__velocity", $val} }
#macro ( val:number=$__velocity_sense { __LET{"__velocity", $__velocity - $val} }
#macro ) val:number=$__velocity_sense { __LET{"__velocity", $__velocity + $val} }
#macro TIMING val:number { __LET{"__timing", $val} }


#variable __tempo:number
#variable __tempo_tmp:number
#macro TEMPO val:number { __LET{"__tempo", $val} __LET{"__tempo_tmp", 1000000 * {60 / $val}} __MIDI_META {#51, $__tempo_tmp / #10000, {$__tempo_tmp % #10000} / #100, $__tempo_tmp % #100} }
#macro t val:number { TEMPO $val }
#macro t+ val:number { t $__tempo + $val }
#macro t- val:number { t $__tempo - $val }
#variable __expression:number
#macro E val:number { __LET{"__expression", $val} CC#0B,$val }
#macro E+ val:number { E $__expression + $val }
#macro E- val:number { E $__expression - $val }
#variable __modulation:number
#macro M val:number { __LET{"__modulation", $val} CC1,$val }
#macro M+ val:number { M $__modulation + $val }
#macro M- val:number { M $__modulation - $val }
#variable __main_volume:number
#macro V val:number { __LET{"__main_volume", $val} CC7,$val }
#macro V+ val:number { V $__main_volume + $val }
#macro V- val:number { V $__main_volume - $val }
#variable __pan:number
#macro P val:number { __LET{"__pan", $val} CC#0A,$val }
#macro P+ val:number { P $__pan + $val }
#macro P- val:number { P $__pan - $val }
#macro PAN val:number { P $val }
#macro PAN+ val:number { P+ $val }
#macro PAN- val:number { P- $val }
#macro H val:number { CC#40,$val } // dumper pedal
#macro @ prg:number,bmsb:number=0,blsb:number=0 { CC0,$bmsb CC#20,$blsb PROGRAM$prg }
#variable __bend:number = 0
#variable __pitchbend_cent_mode:number = 0
#variable __pitchbend_bare_value:number = 0
#macro BEND_CENT_MODE val:number { __LET{"__pitchbend_cent_mode", $val} }
#macro BEND val:number { \
	__LET{"__bend", $val} \
	__LET{"__pitchbend_bare_value", $__pitchbend_cent_mode ? $val / 100 * 8192 / $__pitchbend_cent_mode, $val } \
	PITCH $__pitchbend_bare_value + 8192 \
	}
#macro B val:number { BEND$val }
#macro B+ val:number { BEND $__bend + $val }
#macro B- val:number { BEND $__bend - $val }
#macro DTEM val:number { CC #06,$val }
#macro DTEL val:number { CC #26,$val }
#macro DTE msb:number,lsb:number { DTEM$msb DTEL$lsb }
#macro SOS val:number { CC#42,$val } // sostenuto
#macro SOFT val:number { CC#43,$val } // soft pedal
#macro LEGATO val:number { CC#44,$val }
#macro HX val:number { CC#45,$val } // Hold 2 (release parameter based)
#variable __reverb_send_depth:number
#macro RSD val:number { __LET{"__reverb_send_depth", $val} CC#5B,$val }
#macro RSD+ val:number { RSD $__reverb_send_depth + $val }
#macro RSD- val:number { RSD $__reverb_send_depth - $val }
#variable __chorus_send_depth:number
#macro CSD val:number { __LET{"__chorus_send_depth", $val} CC#5D,$val }
#macro CSD+ val:number { CSD $__chorus_send_depth + $val }
#macro CSD- val:number { CSD $__chorus_send_depth - $val }
#variable __delay_send_depth:number
#macro DSD val:number { __LET{"__delay_send_depth", $val} CC#5E,$val } // 5E is not always DSD though...
#macro DSD+ val:number { DSD $__delay_send_depth + $val }
#macro DSD- val:number { DSD $__delay_send_depth - $val }
#macro NRPNM val:number { CC #63,$val }
#macro NRPNL val:number { CC #62,$val }
#macro NRPN msb:number,lsb:number { NRPNM$msb NRPNL$lsb }
#macro RPNM val:number { CC #65,$val }
#macro RPNL val:number { CC #64,$val }
#macro RPN msb:number,lsb:number { RPNM$msb RPNL$lsb }
#macro TEXT val:string { __MIDI_META{1, $val} }
#macro COPYRIGHT val:string { __MIDI_META{2, $val} }
#macro TRACKNAME val:string { __MIDI_META{3, $val} }
#macro INSTRUMENTNAME val:string { __MIDI_META{4, $val} }
#macro LYRIC val:string { __MIDI_META{5, $val} }
#macro MARKER val:string { __MIDI_META{6, $val} }
#macro CUE val:string { __MIDI_META{7, $val} }
#macro BEAT num:number,denom:number { __MIDI_META{#58, $num, \
	$denom - 16 ? $denom - 8 ? $denom - 4 ? $denom - 2 ? $denom, \
	1, 2, 3, 4, 0, 0} }
// #macro KEY TBD {__MIDI_META{ 59h}}

#macro PITCH_BEND_SENSITIVITY val:number { RPN 0,0 DTE $val,0 }

// Gate time. This command is dependent on personal favor, so should be easily redefined.
#macro GATE_DENOM val:number { __LET{"__gate_rel_denom", $val} }
#macro Q val:number { __LET{"__gate_rel", $val} }
#macro q val:number { __LET{"__gate_abs", $val} }

// Octave. The relative syntax is also dependent on personal favor.
#macro o val:number { __LET{"__octave", $val} }
#macro > { __LET{"__octave", $__octave + 1} }
#macro < { __LET{"__octave", $__octave - 1} }

// NoteOn/Off events
#define KEYARGDEF step:length=$__length, gate:length=%-1, vel:number=$__velocity, timing:number=$__timing, offvel:number=0
#define KEYARGAPPLY $step, $gate, $vel, $timing, $offvel
#macro n key:number, KEYARGDEF   { \
	__LET{"__current_note_step", $gate + %1 ? $gate, $step}  \
	__LET{"__current_note_gate", $__current_note_step * $__gate_rel * {1 / $__gate_rel_denom} - $__gate_abs} \
	__LET{"__current_note_gate", $__current_note_gate \< 0 ? 0, $__current_note_gate } \
	NOP$timing \
	NON$key, $vel \
	NOP$__current_note_gate \
	__ON_MIDI_NOTE_OFF{$__current_note_gate, $key, $vel} \
	NOFF$key, $offvel \
	NOP$step - $__current_note_gate \
	NOP0-$timing \
	}

#macro & { __SYNC_NOFF_WITH_NEXT }

// These + and - are nasty, but to be defined as macro, they had better be
// formalized as below, without being treated specially by the parser.
#macro c__= mod:number, KEYARGDEF { n $__octave * 12 + $__trans + $mod, KEYARGAPPLY }
#macro c- KEYARGDEF { c__= - 1, KEYARGAPPLY } // should be used for some chord
#macro c= KEYARGDEF { c__= 0, KEYARGAPPLY }
#macro c KEYARGDEF { c__= $__trans_c, KEYARGAPPLY }
#macro c+ KEYARGDEF { c__= 1, KEYARGAPPLY }
#macro d__= mod:number, KEYARGDEF { n $__octave * 12 + $__trans + 2 + $mod, KEYARGAPPLY }
#macro d- KEYARGDEF { d__= - 1, KEYARGAPPLY }
#macro d= KEYARGDEF { d__= 0, KEYARGAPPLY }
#macro d KEYARGDEF { d__= $__trans_d, KEYARGAPPLY }
#macro d+ KEYARGDEF { d__= 1, KEYARGAPPLY }
#macro e__= mod:number, KEYARGDEF { n $__octave * 12 + $__trans + 4 + $mod, KEYARGAPPLY }
#macro e- KEYARGDEF { e__= - 1, KEYARGAPPLY }
#macro e= KEYARGDEF { e__= 0, KEYARGAPPLY }
#macro e KEYARGDEF { e__= $__trans_e, KEYARGAPPLY }
#macro e+ KEYARGDEF { e__= 1, KEYARGAPPLY } // should be used for some chord
#macro f__= mod:number, KEYARGDEF { n $__octave * 12 + $__trans + 5 + $mod, KEYARGAPPLY }
#macro f- KEYARGDEF { f__= - 1, KEYARGAPPLY } // should be used for some chord
#macro f= KEYARGDEF { f__= 0, KEYARGAPPLY }
#macro f KEYARGDEF { f__= $__trans_f, KEYARGAPPLY }
#macro f+ KEYARGDEF { f__= 1, KEYARGAPPLY }
#macro g__= mod:number, KEYARGDEF { n $__octave * 12 + $__trans + 7 + $mod, KEYARGAPPLY }
#macro g- KEYARGDEF { g__= - 1, KEYARGAPPLY }
#macro g= KEYARGDEF { g__= 0, KEYARGAPPLY }
#macro g KEYARGDEF { g__= $__trans_g, KEYARGAPPLY }
#macro g+ KEYARGDEF { g__= 1, KEYARGAPPLY }
#macro a__= mod:number, KEYARGDEF { n $__octave * 12 + $__trans + 9 + $mod, KEYARGAPPLY }
#macro a- KEYARGDEF { a__= - 1, KEYARGAPPLY }
#macro a= KEYARGDEF { a__= 0, KEYARGAPPLY }
#macro a KEYARGDEF { a__= $__trans_a, KEYARGAPPLY }
#macro a+ KEYARGDEF { a__= 1, KEYARGAPPLY }
#macro b__= mod:number, KEYARGDEF { n $__octave * 12 + $__trans + 11 + $mod, KEYARGAPPLY }
#macro b- KEYARGDEF { b__= - 1, KEYARGAPPLY }
#macro b= KEYARGDEF { b__= 0, KEYARGAPPLY }
#macro b KEYARGDEF { b__= $__trans_b, KEYARGAPPLY }
#macro b+ KEYARGDEF { b__= 1, KEYARGAPPLY } // should be used for some chord

#macro r step:length=$__length { NOP{$step} }


// ---- general Loop syntax ----
#comment
// FIXME: I want to define them as macro, but a macro cannot contain only one side (open/close) of a loop.
// It is by design.

#macro [ { __LOOP_BEGIN{} }
#define LOOP_BREAK_ARG_DEF \
	a:number, b:number, c:number, d:number, e:number, f:number, g:number, h:number
#define LOOP_BREAK_ARG_USE $a, $b, $c, $d, $e, $f, $g, $h
#macro : LOOP_BREAK_ARG_DEF { __LOOP_BREAK{LOOP_BREAK_ARG_USE} } // count may follow
// note that this conclicts division operator (but it won't appear without left operand).
#macro / LOOP_BREAK_ARG_DEF { __LOOP_BREAK{LOOP_BREAK_ARG_USE} }
// (it should be allowewd because / is not a primitive operation but an operator for
// mul_div_expr.)
#macro ] repeat:number { __LOOP_END{$repeat} }
#endcomment


// ---- common system exclusive ----
#macro GM_SYSTEM_ON { __MIDI {#F0, #7E, #7F, #09, #01, #F7 } }
#macro XG_RESET { __MIDI {#F0, #43, #10, #4C, #00, #00, #7E, #00, #F7 }}

// ---- SPECTRA ----
#variable __work_step_start:number = 0

#variable __work_repeat_time:number
#define SPECTRA_ONESHOT_ARG_DEF sv:number, ev:number, sd:length, len:length, deltaLen:length = %4
#define SPECTRA_ONESHOT_ARG_USE $sv, $ev, $sd, $len, $deltaLen
#macro SPECTRA_ONESHOT mabs:string, mrel:string, SPECTRA_ONESHOT_ARG_DEF { \
	__LET {"__work_step_start", $__timeline_position} \
	__LET {"__work_repeat_time", $len / $deltaLen } \
	__LET {"__timeline_position", $__timeline_position + $sd} \
	__APPLY {$mabs, $sv} \
	[ \
	__LET {"__timeline_position", $__timeline_position + $deltaLen} \
	__APPLY {$mrel, {$ev - $sv} / $__work_repeat_time } \
	] $__work_repeat_time \
	__APPLY {$mabs, $ev} \
	__LET {"__timeline_position", $__work_step_start}  \
	}

#macro P_ SPECTRA_ONESHOT_ARG_DEF { SPECTRA_ONESHOT "P", "P+", SPECTRA_ONESHOT_ARG_USE }
#macro V_ SPECTRA_ONESHOT_ARG_DEF { SPECTRA_ONESHOT "V", "V+", SPECTRA_ONESHOT_ARG_USE }
#macro E_ SPECTRA_ONESHOT_ARG_DEF { SPECTRA_ONESHOT "E", "E+", SPECTRA_ONESHOT_ARG_USE }
#macro t_ SPECTRA_ONESHOT_ARG_DEF { SPECTRA_ONESHOT "t", "t+", SPECTRA_ONESHOT_ARG_USE }
#macro M_ SPECTRA_ONESHOT_ARG_DEF { SPECTRA_ONESHOT "M", "M+", SPECTRA_ONESHOT_ARG_USE }
#macro B_ SPECTRA_ONESHOT_ARG_DEF { SPECTRA_ONESHOT "B", "B+", SPECTRA_ONESHOT_ARG_USE }

#define SPECTRA_TRIANGLE_ARG_DEF sv:number, ev:number, sd:number, ed:number, ts:number, es:number = %4, delta:number, rt:number
#define SPECTRA_TRIANGLE_ARG_USE $sv, $ev, $sd, $ed, $ts, $es, $delta, $rt
#macro SPECTRA_TRIANGLE mabs:string, mpos:string, mneg:string, SPECTRA_TRIANGLE_ARG_DEF { \
	__LET {"__work_step_start", $__timeline_position} \
	__LET {"__timeline_position", $__timeline_position + $sd} \
	__APPLY {$mabs, $sv} \
	[ \
	 [ \
	__LET {"__timeline_position", $__timeline_position + $es} \
	__APPLY {$mpos, $delta} \
	 ] $ts / $es \
	 [ \
	__LET {"__timeline_position", $__timeline_position + $es} \
	__APPLY {$mneg, $delta} \
	 ] $ts / $es \
	] $rt \
	__LET {"__timeline_position", $__timeline_position + $ed} \
	__APPLY {$mabs, $ev} \
	__LET {"__timeline_position", $__work_step_start}  \
	}

#macro Pt SPECTRA_TRIANGLE_ARG_DEF { SPECTRA_TRIANGLE "P", "P+", "P-", SPECTRA_TRIANGLE_ARG_USE }
#macro Vt SPECTRA_TRIANGLE_ARG_DEF { SPECTRA_TRIANGLE "V", "V+", "V-", SPECTRA_TRIANGLE_ARG_USE }
#macro Et SPECTRA_TRIANGLE_ARG_DEF { SPECTRA_TRIANGLE "E", "E+", "E-", SPECTRA_TRIANGLE_ARG_USE }
#macro tt SPECTRA_TRIANGLE_ARG_DEF { SPECTRA_TRIANGLE "t", "t+", "t-", SPECTRA_TRIANGLE_ARG_USE }
#macro Mt SPECTRA_TRIANGLE_ARG_DEF { SPECTRA_TRIANGLE "M", "M+", "M-", SPECTRA_TRIANGLE_ARG_USE }
#macro Bt SPECTRA_TRIANGLE_ARG_DEF { SPECTRA_TRIANGLE "BEND", "B+", "B-", SPECTRA_TRIANGLE_ARG_USE }
