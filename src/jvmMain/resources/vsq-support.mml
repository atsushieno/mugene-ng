// Macro definitions for VSQ output support

// Usage:
//	- add USE_NSX_ONE on channel 1 if you want to use NSX-1
//	- at beginning:
//		- set variables for DEFINE_SINGER operation.
//		- call VSQ_INITIALIZE_TRACK. DEFINE_SINGER is indirectly called.
//		- if it is the first singer track, call VSQ_SETUP_FIRST_TRACK
//		- then, call VSQ_SETUP_DONE.
//		- After VSQ_SETUP_DONE, a rest of *non-zero* length is *required*.
//	- at finishing:
//		- call OUTPUT_VSQ_TEXT
//	- define vibrato using DEFINE_VIBRATO operation. Vibrato is referenced by definition index.
//	- write lyrics in raw Japanese (hiragana), it does not proceed timeline. They must be described only
//	  after vibrato definitions (to not confuse lyric consumption by note operations).
//	- write notes. Every note operation consumes one lyric.
//    - if you write notes before lyrics, the compiler crashes.
//      (macro processor doesn't have any decent error processing...)
//	- You can apply vibrato to the next note by @V operation.
//    Reference it by definition index.
//	- Or you can also apply vibrato to every following note by
//    @VV operation. (Reference by index too.)
//	- BPList  operations are:
//		- B : PitchBend
//		- D : Dynamics
//		- BRE : Breathiness
//		- BRI : Brightness
//		- C : Clearness
//		- H : Harmonics (valid only in Vocaloid1)
//		- XD : VibTrimDepth (valid only in Vocaloid1)
//		- G : Gender factor
//		- POR : Portamento Timing
//		- O : Opening
//	- NRPNs are supported as is; use NRPN and DTE operations. Or use some shorthand ones:
//		- BANK : language selection
//		- P : panpot
//		- V : volume
//		- VIB_RATE : vibrato rate
//		- VIB_DEPTH : vibrato depth
//		- PITCH_BEND_SENSITIVITY : pitch bend sensitivity
//		- @ : program change
//
// Implementation notes (users usually don't have to care):
//
//	- The primary operations are "LJ" (or LBC/LBV for Bopomofo) and "n".
//	  L* defines a lyric handle, and n consumes a lyric to give a note.
//	  Both outputs a couple of meta text and NRPN operations.
//	- Both NRPNs from "L" and "n" should be actually unified to
//	  generate one note operation by the time NRPN(50,7F)=(7F,-) appears.
//

#basecount 1920

#variable __is_nsx_one:number = 0
#macro USE_NSX_ONE { __LET { "__is_nsx_one", 1 } }

// NRPNs
// If you want to use NSX-1, define VOCAL_CHANNEL (number) and insert it between #macro and those operators.
#macro VOCAL_CHANNEL NRPNM val:number { CC #63,$val }
#macro VOCAL_CHANNEL NRPNL val:number { CC #62,$val }
#macro VOCAL_CHANNEL DTEM val:number { CC #06,$val }
#macro VOCAL_CHANNEL DTEL val:number { CC #26,$val }
#macro VOCAL_CHANNEL NRPNMP key,val { NRPNM $key DTEM $val }
#macro VOCAL_CHANNEL NRPNMPW key,msb,lsb { NRPNM $key DTE $msb,$lsb }
#macro VOCAL_CHANNEL NRPNLP key,val { NRPNL $key DTEM $val }
#macro VOCAL_CHANNEL NRPNLPW key,msb,lsb { NRPNL $key DTE $msb,$lsb }

#variable __version:number = 0
#variable __device:number = 0
#variable __delay:number = 0

#macro VOCAL_CHANNEL VER_DEV_DELAY_VAL_B msb,vmsb { \
	NRPNM $msb DTE $__version, $__device \
	NRPNLPW 1, $__delay % #80, $__delay / #80 \
	NRPNLP 2,$vmsb }
#macro VOCAL_CHANNEL VER_DEV_DELAY_VAL msb,vmsb { \
	NRPN $msb, 0 DTE $__version, $__device \
	NRPNLPW 1, $__delay % #80, $__delay / #80 \
	NRPNLP 2,$vmsb }
#macro VOCAL_CHANNEL BANK val:number { VER_DEV_DELAY_VAL_B #60,$val }
#macro VOCAL_CHANNEL V val:number { VER_DEV_DELAY_VAL #61,$val }
#macro VOCAL_CHANNEL P val:number { VER_DEV_DELAY_VAL #62,$val }
#macro VOCAL_CHANNEL VIB_RATE val:number { VER_DEV_DELAY_VAL #64,$val }
#macro VOCAL_CHANNEL VIB_DEPTH val:number { VER_DEV_DELAY_VAL #65,$val }
// FIXME: what is Effect2, which occupies #66?
#macro VOCAL_CHANNEL PITCH_BEND_SENSITIVITY val:number { VER_DEV_DELAY_VAL #67,$val }
#macro VOCAL_CHANNEL @ prog:number, lang:number=0 { BANK $lang NRPN #53,2 DTEM $prog }

// Buffer definitions
#variable EntireText:buffer
#variable Common:buffer
#variable MasterTrackSetup:buffer
#variable Events:buffer
#variable Defs:buffer
#variable Handles:buffer
#variable PitchBendBPList:buffer
#variable PitchBendSensBPList:buffer
#variable DynamicsBPList:buffer
#variable EpRResidualBPList:buffer
#variable EpRESlopeBPList:buffer
#variable EpRESlopeDepthBPList:buffer
#variable EpRSineBPList:buffer
// They are renamed from 1-4 to A-D as numbers are invalid as an identifier character.
#variable ResoAFreqBPList:buffer
#variable ResoBFreqBPList:buffer
#variable ResoCFreqBPList:buffer
#variable ResoDFreqBPList:buffer
#variable ResoABWBPList:buffer
#variable ResoBBWBPList:buffer
#variable ResoCBWBPList:buffer
#variable ResoDBWBPList:buffer
#variable ResoAAmpBPList:buffer
#variable ResoBAmpBPList:buffer
#variable ResoCAmpBPList:buffer
#variable ResoDAmpBPList:buffer
#variable VibTremDepthBPList:buffer
#variable GenderFactorBPList:buffer
#variable PortamentoTimingBPList:buffer
#variable OpeningBPList:buffer

#macro VSQ_INITIALIZE_MASTER { TRACKNAME "Master Track" }

#macro VOCAL_CHANNEL SETUP_COMMON { __STORE {"Common", "[Common]", \
	"\nVersion=", $CommonVersion, "\nName=", $CommonName, \
	"\nColor=", $CommonColorRed, ",", $CommonColorGreen, ",", $CommonColorBlue, \
	"\nDynamicsMode=", $CommonDynamicsMode, "\nPlayMode=", $CommonPlayMode, "\n" } }

#variable MasterFeder, MasterPanpot, MasterMute, MasterOutputMode, MasterTracks:number=1
#macro VOCAL_CHANNEL VSQ_SETUP_FIRST_TRACK { __STORE {"MasterTrackSetup", "[Master]", "\nPreMeasure=4\n", \
	"[Mixer]", "\nMasterFeder=", $MasterFeder, "\nMasterPanpot=", $MasterPanpot, \
	"\nMasterMute=", $MasterMute, "\nOutputMode=", $MasterOutputMode, \
	"\nTracks=", $MasterTracks, "\n" } \
	}  //  FIXME: Feder[0-*], Panpot[0-*], Mute[0-*], Solo[0-*] could go here too
#macro VOCAL_CHANNEL VSQ_SETUP_DONE { }

#variable __tmp_position
#macro VOCAL_CHANNEL OUTPUT_VSQ_TEXT { \
	__STORE_FORMAT {"Events", "{0}=EOS\n", $__timeline_position } \
	__LET {"__tmp_position", $__timeline_position } \
	__LET {"__timeline_position", 0 } \
	TRACKNAME $CommonName \
	SETUP_COMMON \
	__STORE { "EntireText", $Common, $MasterTrackSetup, "[EventList]\n", $Events, $Defs, $Handles \
		,$PitchBendBPList \
		,$PitchBendSensBPList \
		,$DynamicsBPList \
		,$EpRResidualBPList \
		,$EpRESlopeBPList \
		,$EpRESlopeDepthBPList \
		,$EpRSineBPList \
		,$ResoAFreqBPList \
		,$ResoBFreqBPList \
		,$ResoCFreqBPList \
		,$ResoDFreqBPList \
		,$ResoABWBPList \
		,$ResoBBWBPList \
		,$ResoCBWBPList \
		,$ResoDBWBPList \
		,$ResoAAmpBPList \
		,$ResoBAmpBPList \
		,$ResoCAmpBPList \
		,$ResoDAmpBPList \
		,$VibTremDepthBPList \
		,$GenderFactorBPList \
		,$PortamentoTimingBPList \
		,$OpeningBPList \
		} \
	TEXT $EntireText \
	@ $Program, $Language \
	__LET {"__timeline_position", $__tmp_position } \
	}


#variable __handle_defs
#variable __handle_uses
#variable __events

// Singer definition ----
#variable IconID:string = "$07010000"
#variable IDS:string = "Miku"
#variable Original:number = 0
#variable Caption:string
#variable Length:number = 1
#variable Language:number = 0
#variable Program:number = 0
#variable CommonVersion:string = "DSB301"
#variable CommonName:string = "Voice1"
#variable CommonColorRed:number = 157
#variable CommonColorGreen:number = 181
#variable CommonColorBlue:number = 123
#variable CommonDynamicsMode:number = 1
#variable CommonPlayMode:number = 1

#macro VOCAL_CHANNEL SINGER_MIKU { \
	__LET {"IconID", "$07010000" } __LET {"IDS", "Miku" } __LET {"Original", 0} \
	__LET {"Language", 0 } __LET {"Program", 0 } __LET {"CommonVersion", "DSB301" } }
// FIXME: define SINGER_RIN, SINGER_LEN, SINGER_LUKA, SINGER_GAK, SINGER_MEG etc.

// relevant variables: $IconID, $IDS, $Original, $Caption, $Length, $Language, $Program
#macro VOCAL_CHANNEL DEFINE_SINGER { \
	__STORE { \
		"Handles", "[h#0000]\nIconID=", $IconID, "\nIDS=", $IDS, \
		"\nOriginal=", $Original, "\nCaption=", $Caption, "\nLength=", $Length, \
		"\nLanguage=", $Language, "\nProgram=", $Program, "\n" } \
	__STORE {"Events", "0=ID#0000\n"} \
	__STORE {"Defs", "[ID#0000]\nType=Singer\nIconHandle=h#0000\n"} \
	__LET { "__handle_defs", $__handle_defs + 1 } \
	__LET { "__handle_uses", $__handle_uses + 1 } \
	__LET { "__events", $__events + 1 } \
	}

#macro VOCAL_CHANNEL VSQ_INITIALIZE_TRACK { \
	__STORE {"PitchBendBPList", "[PitchBendBPList]\n"} \
	__STORE {"PitchBendSensBPList", "[PitchBendSensBPList]\n"} \
	__STORE {"DynamicsBPList", "[DynamicsBPList]\n"} \
	__STORE {"EpRResidualBPList", "[EpRResidualBPList]\n"} \
	__STORE {"EpRESlopeBPList", "[EpRESlopeBPList]\n"} \
	__STORE {"EpRESlopeDepthBPList", "[EpRESlopeDepthBPList]\n"} \
	__STORE {"EpRSineBPList", "[EpRSineBPList]\n"} \
	__STORE {"ResoAFreqBPList", "[Reso1FreqBPList]\n"} \
	__STORE {"ResoBFreqBPList", "[Reso2FreqBPList]\n"} \
	__STORE {"ResoCFreqBPList", "[Reso3FreqBPList]\n"} \
	__STORE {"ResoDFreqBPList", "[Reso4FreqBPList]\n"} \
	__STORE {"ResoABWBPList", "[Reso1BWBPList]\n"} \
	__STORE {"ResoBBWBPList", "[Reso2BWBPList]\n"} \
	__STORE {"ResoCBWBPList", "[Reso3BWBPList]\n"} \
	__STORE {"ResoDBWBPList", "[Reso4BWBPList]\n"} \
	__STORE {"ResoAAmpBPList", "[Reso1AmpBPList]\n"} \
	__STORE {"ResoBAmpBPList", "[Reso2AmpBPList]\n"} \
	__STORE {"ResoCAmpBPList", "[Reso3AmpBPList]\n"} \
	__STORE {"ResoDAmpBPList", "[Reso4AmpBPList]\n"} \
	__STORE {"VibTremDepthBPList", "[VibTremDepthBPList]\n"} \
	__STORE {"GenderFactorBPList", "[GenderFactorBPList]\n"} \
	__STORE {"PortamentoTimingBPList", "[PortamentoTimingBPList]\n"} \
	__STORE {"OpeningBPList", "[OpeningBPList]\n"} \
	DEFINE_SINGER \
	}

// Lyrics operators.
// The actual macros for letters are defined later (they are bunch).

// Japanese (Kana) and Bopomofo (Taiwanese) are defined so far.

#define HANDLE_DEFS_COND {$__handle_defs \> 10000 ? "[h#{0:D08}]\n", "[h#{0:D04}]\n"}
#define HANDLE_USES_COND {$__handle_uses \> 10000 ? "h#{0:D08}\n", "h#{0:D04}\n"}
#variable tmp_phonLen, phonA, phonB, phonC
#variable __prev_vowel
#macro VOCAL_CHANNEL LJ label:string, en:string, params:string, phonLen, phonA, phonB, phonC { \
	__APPLY { $__is_nsx_one \> 0 ? "LJ_NSX_ONE", "LJ_VOCALOID", $label, $en, $params, $phonLen, $phonA, $phonB, $phonC } }

#macro VOCAL_CHANNEL LJ_NSX_ONE label:string, en:string, params:string, phonLen, phonA, phonB, phonC, phonD { \
	\// NRPNs (FIXME: they cannot be simply embedded at step 0.)
	__SAVE_OPER_BEGIN \
	NRPNM #71 NRPNLP #12,0 NRPNLP #13,$phonA NRPNLP #13,$phonB NRPNLP #13,$phonC NRPNLP #13,$phonD NRPNLP #4F,#7F \
	__SAVE_OPER_END $__handle_defs \
	__LET{"__handle_defs", $__handle_defs + 1} \
	__LET{"__prev_vowel", $phonD ? $phonD, $phonC ? $phonC, $phonB ? $phonB, $phonA } \
	}

#macro VOCAL_CHANNEL LJ_VOCALOID label:string, en:string, params:string, phonLen, phonA, phonB, phonC, phonD  { \
	\// meta text
	__STORE_FORMAT {"Handles", HANDLE_DEFS_COND, $__handle_defs } \
	__STORE {"Handles", "L0=\"", $label, "\",\"", $en, "\",0.0000000,", $params, ",0\n"} \
	\// NRPNs (FIXME: they cannot be simply embedded at step 0.)
	__SAVE_OPER_BEGIN \
	NRPNM #50 NRPNLP #12,$phonLen NRPNLP #13,$phonA NRPNLP #14,$phonB NRPNLP #15,$phonC NRPNLP #16,$phonD NRPNLP #4F,#7F \
	__SAVE_OPER_END $__handle_defs \
	__LET{"__handle_defs", $__handle_defs + 1} \
	__LET{"__prev_vowel", $phonD ? $phonD, $phonC ? $phonC, $phonB ? $phonB, $phonA } \
	 }

#variable __bopomofo_consonant_label:string = ""
#variable __bopomofo_consonant_ipa:string = ""

#macro LBC label:string, consonant:string { \
	__LET {"__bopomofo_consonant_label", $label } \
	__LET {"__bopomofo_consonant_ipa", $consonant } \
	}
#macro VOCAL_CHANNEL LBV label:string, ipa:string { \
	\// meta text
	__STORE_FORMAT {"Handles", HANDLE_DEFS_COND, $__handle_defs } \
	__STORE {"Handles", "L0=\"", $__bopomofo_consonant_label, $label, "\",\"", $__bopomofo_consonant_ipa, $ipa, "\",0.0000000,", "0", ",0\n"} \
	__SAVE_OPER_BEGIN \
	NRPNM #50 NRPNLP #12,0 NRPNLP #4F,#7F \
	__SAVE_OPER_END $__handle_defs \
	__LET{"__handle_defs", $__handle_defs + 1} \
	__LET{"__bopomofo_consonant_label", ""} \
	__LET{"__bopomofo_consonant_ipa", ""} \
	 }



// Vibrato operations ----
#variable vibrato:number = 0
#variable vibrato_constant:number = 0

#macro VOCAL_CHANNEL DEFINE_VIBRATO \
	ids:string="normal", caption:string, original:number=1, startRate:number, \
	startDepth:number, len:number, depthBPNum:number=0, rateBPNum:number=0 { \
	__STORE_FORMAT {"Handles", HANDLE_DEFS_COND, $__handle_defs } \
	__STORE {"Handles", "IconID=$04040001", "\nIDS=", $ids, "\nOriginal=", $original, \
		"\nCaption=", $caption, "\nLength=", $len, "\nStartDepth=", $startDepth, \
		"\nDepthBPNum=", $depthBPNum, "\nStartRate=", $startRate, \
		"\nRateBPNum=", $rateBPNum, "\n"} \
	__LET {"__handle_defs", $__handle_defs + 1 } \
	__LET {"__handle_uses", $__handle_uses + 1 } \
	}

#macro VOCAL_CHANNEL @V id:number { __LET { "vibrato", $id } } // ID is the defined order.
#macro VOCAL_CHANNEL @VV id:number { __LET {"vibrato_constant", $id } @V $id }

// Note operations ----
#variable dynamics:number = 0
#variable pm_bend_depth:number = 0
#variable pm_bend_length:number = 0
#variable pmb_portament_use:number = 0
#variable dem_dec_gain_rate:number = 0
#variable dem_accent:number = 0
#variable handle_uses:number = 0
#macro VOCAL_CHANNEL AddVibratoHandle id:number { __STORE{"EventDefs", "VibratoHandle=", $id } }
#define EVENTS_COND { $__events \> 10000 ? "[ID#{0:D08}]\n", "[ID#{0:D04}]\n" }
#define EVENTS_APPLY_COND $__events \> 10000 ? "{0}=ID#{1:D08}\n", "{0}=ID#{1:D04}\n"
#macro VOCAL_CHANNEL n key:number, step:length, gate:length, vel:number=$__velocity { \
	__APPLY { $__is_nsx_one \> 0 ? "n__NSX_ONE", "n__VOCALOID", $key, $step, $gate, $vel} }

#macro VOCAL_CHANNEL n__VOCALOID key:number, step:length, gate:length, vel:number=$__velocity { \
	__LET{"__current_note_step", {$gate + %1} ? $gate, $step}  \
	__LET{"__current_note_gate", {{$__current_note_step * $__gate_rel * {1 / $__gate_rel_denom}}} - $__gate_abs} \
	__LET{"__current_note_gate", $__current_note_gate \< 0 ? 0, $__current_note_gate } \
	__STORE_FORMAT {"Defs", EVENTS_COND, $__events } \
	__STORE { "Defs", "Type=Anote\nLength=", $__current_note_gate, "\nNote#=", $key, \
	"\nDynamics=", $dynamics, "\nPMBendDepth=", $pm_bend_depth, \
	"\nPMBendLength=", $pm_bend_length, "\nPMbPortamentoUse=", \
	$pmb_portament_use, "\nDEMdecGainRate=", $dem_dec_gain_rate, \
	"\nDEMaccept=", $dem_accent, "\nLyricHandle=" } \
	__STORE_FORMAT {"Defs", HANDLE_USES_COND, $__handle_uses } \
	__APPLY {$vibrato ? "AddVibratoHandle", "NOP", $vibrato} \
	__LET {"vibrato", $vibrato_constant } \
	__STORE_FORMAT {"Events", EVENTS_APPLY_COND, $__timeline_position, $__events } \
	__LET { "__events", $__events + 1 } \
	\// NRPNs. FIXME: how to calculate "note location"?
	VER_DEV_DELAY_VAL#50,$key NRPNLP 3,$vel NRPNLP 4,$__current_note_gate NRPNLP 5,3 \
	__RESTORE_OPER $__handle_uses NRPNLP #7F,#7F \
	__LET {"__handle_uses", $__handle_uses + 1 } \
	\// FIXME: I reordered operations to work better with NSX-1, verify this still works on Vocaloid2 (which I don't have installed anymore...!)
	NOP $__current_note_step \
	} // One note operation consumes one lyric handle

#macro VOCAL_CHANNEL n__NSX_ONE key:number, KEYARGDEF   { \
	__LET{"__current_note_step", $gate + %1 ? $gate, $step}  \
	__LET{"__current_note_gate", {{$__current_note_step * $__gate_rel * {1 / $__gate_rel_denom}}} - $__gate_abs} \
	__LET{"__current_note_gate", $__current_note_gate \< 0 ? 0, $__current_note_gate } \
	\
	__LET { "__events", $__events + 1 } \
	\
	__RESTORE_OPER $__handle_uses NRPNLP #7F,#7F \
	__LET {"__handle_uses", $__handle_uses + 1 } \
	NOP$timing \
	NON$key, $vel \
	NOP$__current_note_gate \
	__ON_MIDI_NOTE_OFF{$__current_note_gate, $key, $vel} \
	NOFF$key, $offvel \
	NOP$step - $__current_note_gate \
	NOP0-$timing \
	}


// BPLists ----
#macro VOCAL_CHANNEL BP_NRPN paraID,val { VER_DEV_DELAY #55,$paraID,0 NRPNLP 3,$val }

#variable __pitch_bend_bp:number
#macro VOCAL_CHANNEL B val:number { __LET { "__pitch_bend_bp", $val } __STORE { "PitchBendBPList", $__timeline_position, "=", $val, "\n" } \
	VER_DEV_DELAY #54, $val % #80, $val / #80 }
#macro VOCAL_CHANNEL B+ val:number { P $__pitch_bend_bp + $val }
#macro VOCAL_CHANNEL B_ SPECTRA_ONESHOT_ARG_DEF { SPECTRA_ONESHOT "P", "P+", SPECTRA_ONESHOT_ARG_USE }

#variable __dynamics
#macro VOCAL_CHANNEL D val:number { __LET { "__dynamics", $val } \
	__STORE { "DynamicsBPList", $__timeline_position, "=", $val, "\n" } VER_DEV_DELAY #63,$val,0 }
#macro VOCAL_CHANNEL D+ val:number { D $__dynamics + $val }
#macro VOCAL_CHANNEL D_ SPECTRA_ONESHOT_ARG_DEF { SPECTRA_ONESHOT "D", "D+", SPECTRA_ONESHOT_ARG_USE }

#variable __breathiness
#macro VOCAL_CHANNEL BRE val:number { __LET { "__breathiness", $val } \
	__STORE { "EpRResidualBPList", $__timeline_position, "=", $val, "\n" } BP_NRPN31,$val }
#macro VOCAL_CHANNEL BRE+ val:number { BRE $__breathiness + $val }
#macro VOCAL_CHANNEL BRE_ SPECTRA_ONESHOT_ARG_DEF { SPECTRA_ONESHOT "BRE", "BRE+", SPECTRA_ONESHOT_ARG_USE }

#variable __brightness
#macro VOCAL_CHANNEL BRI val:number { __LET { "__brightness", $val } \
	__STORE { "EpRESlopeBPList", $__timeline_position, "=", $val, "\n" } BP_NRPN32,$val }
#macro VOCAL_CHANNEL BRI+ val:number { BRI $__brightness + $val }
#macro VOCAL_CHANNEL BRI_ SPECTRA_ONESHOT_ARG_DEF { SPECTRA_ONESHOT "BRI", "BRI+", SPECTRA_ONESHOT_ARG_USE }

#variable __clearness
#macro VOCAL_CHANNEL C val:number { __LET { "__clearness", $val } \
	__STORE { "EpRESlopeDepthBPList", $__timeline_position, "=", $val, "\n" } BP_NRPN33,$val }
#macro VOCAL_CHANNEL C+ val:number { C $__clearness + $val }
#macro VOCAL_CHANNEL C_ SPECTRA_ONESHOT_ARG_DEF { SPECTRA_ONESHOT "C", "C+", SPECTRA_ONESHOT_ARG_USE }

// only in V1
#variable __harmonics
#macro VOCAL_CHANNEL H val:number { __LET { "__harmonics", $val } \
	__STORE { "EpRSineBPList", $__timeline_position, "=", $val, "\n" } BP_NRPN30,$val }
#macro VOCAL_CHANNEL H+ val:number { H $__harmonics + $val }
#macro VOCAL_CHANNEL H_ SPECTRA_ONESHOT_ARG_DEF { SPECTRA_ONESHOT "H", "H+", SPECTRA_ONESHOT_ARG_USE }

#variable __vib_trem_depth
// FIXME: no NRPNs to write?
#macro VOCAL_CHANNEL XD val:number { __LET { "__vib_trem_depth", $val } __STORE { "VibTremDepthBPList", $__timeline_position, "=", $val, "\n" } }
#macro VOCAL_CHANNEL XD+ val:number { XD $__vib_trem_depth + $val }
#macro VOCAL_CHANNEL XD_ SPECTRA_ONESHOT_ARG_DEF { SPECTRA_ONESHOT "XD", "XD+", SPECTRA_ONESHOT_ARG_USE }

#variable __gender_factor
#macro VOCAL_CHANNEL G val:number { __LET { "__gender_factor", $val } \
	__STORE { "GenderFactorBPList", $__timeline_position, "=", $val, "\n" } BP_NRPN70,$val }
#macro VOCAL_CHANNEL G+ val:number { G $__gender_factor + $val }
#macro VOCAL_CHANNEL G_ SPECTRA_ONESHOT_ARG_DEF { SPECTRA_ONESHOT "G", "G+", SPECTRA_ONESHOT_ARG_USE }

#variable __portamento_timing
#macro VOCAL_CHANNEL POR val:number { __LET { "__portamento_timing", $val } \
	__STORE { "PortamentoTimingBPList", $__timeline_position, "=", $val, "\n" } BP_NRPN34,$val }
#macro VOCAL_CHANNEL POR+ val:number { POR $__portamento_timing + $val }
#macro VOCAL_CHANNEL POR_ SPECTRA_ONESHOT_ARG_DEF { SPECTRA_ONESHOT "POR", "POR+", SPECTRA_ONESHOT_ARG_USE }

#variable __opening
#macro VOCAL_CHANNEL O val:number { __LET { "__opening", $val } \
	__STORE { "OpeningBPList", $__timeline_position, "=", $val, "\n" } BP_NRPN35,$val }
#macro VOCAL_CHANNEL O+ val:number { O $__opening + $val }
#macro VOCAL_CHANNEL O_ SPECTRA_ONESHOT_ARG_DEF { SPECTRA_ONESHOT "O", "O+", SPECTRA_ONESHOT_ARG_USE }

// Lyrics macro for Japanese ----
#macro 　 { } // fullwidth space
#macro あ { LJ "あ", "a", "0", 1, #61 }
#macro い { LJ "い", "i", "0", 1, #69 }
#macro う { LJ "う", "M", "0", 1, #4D }
#macro え { LJ "え", "e", "0", 1, #65 }
#macro お { LJ "お", "o", "0", 1, #6F }
#macro か { LJ "か", "k a", "64,0", 3, #6B, #20, #61 }
#macro く { LJ "く", "k M", "64,0", 3, #6B, #20, #4D }
#macro け { LJ "け", "k e", "64,0", 3, #6B, #20, #65 }
#macro こ { LJ "こ", "k o", "64,0", 3, #6B, #20, #6F }
#macro きゃ { LJ "きゃ", "k' a", "64,64,0", 4, #6B, #27, #20, #61 }
#macro き   { LJ "き",   "k' i", "64,64,0", 4, #6B, #27, #20, #69 }
#macro きゅ { LJ "きゅ", "k' M", "64,64,0", 4, #6B, #27, #20, #4D }
#macro きぇ { LJ "きぇ", "k' e", "64,64,0", 4, #6B, #27, #20, #65 }
#macro きょ { LJ "きょ", "k' o", "64,64,0", 4, #6B, #27, #20, #6F }
#macro が { LJ "が", "g a", "64,0", 3, #67, #20, #61 }
#macro ぐ { LJ "ぐ", "g M", "64,0", 3, #67, #20, #4D }
#macro げ { LJ "げ", "g e", "64,0", 3, #67, #20, #65 }
#macro ご { LJ "ご", "g o", "64,0", 3, #67, #20, #6F }
#macro ぎゃ { LJ "ぎゃ", "g' a", "64,64,0", 4, #67, #27, #20, #61 }
#macro ぎ   { LJ "ぎ",   "g' i", "64,64,0", 4, #67, #27, #20, #69 }
#macro ぎゅ { LJ "ぎゅ", "g' M", "64,64,0", 4, #67, #27, #20, #4D }
#macro ぎぇ { LJ "ぎぇ", "g' e", "64,64,0", 4, #67, #27, #20, #65 }
#macro ぎょ { LJ "ぎょ", "g' o", "64,64,0", 4, #67, #27, #20, #6F }
#macro さ { LJ "さ", "s a", "64,0", 3, #73, #20, #61 }
#macro す { LJ "す", "s M", "64,0", 3, #73, #20, #4D }
#macro せ { LJ "せ", "s e", "64,0", 3, #73, #20, #65 }
#macro そ { LJ "そ", "s o", "64,0", 3, #73, #20, #6F }
#macro しゃ { LJ "しゃ", "S a", "64,0", 3, #53, #20, #61 }
#macro し   { LJ "し",   "S i", "64,0", 3, #53, #20, #69 }
#macro しゅ { LJ "しゅ", "S M", "64,0", 3, #53, #20, #4D }
#macro しぇ { LJ "しぇ", "S e", "64,0", 3, #53, #20, #65 }
#macro しょ { LJ "しょ", "S o", "64,0", 3, #53, #20, #6F }
// word continuator (N/A in eVocaloid)
#macro _ざ { LJ "ざ", "z a", "64,0", 3, #7A, #20, #61 }
#macro _じ { LJ "じ", "Z i", "64,0", 3, #5A, #20, #69 }
#macro _ず { LJ "ず", "z M", "64,0", 3, #7A, #20, #4D }
#macro _ぜ { LJ "ぜ", "z e", "64,0", 3, #7A, #20, #65 }
#macro _ぞ { LJ "ぞ", "z o", "64,0", 3, #7A, #20, #6F }
// word initiator
#macro ざ { LJ "ざ", "dz a", "64,0", 4, #64, #7A, #20, #61 }
#macro ず { LJ "ず", "dz M", "64,0", 4, #64, #7A, #20, #4D }
#macro ぜ { LJ "ぜ", "dz e", "64,0", 4, #64, #7A, #20, #65 }
#macro ぞ { LJ "ぞ", "dz o", "64,0", 4, #64, #7A, #20, #6F }
#macro じゃ { LJ "じゃ", "dZ a", "64,64,0", 4, #64, #5A, #20, #61 }
#macro じ   { LJ "じ",   "dZ i", "64,64,0", 4, #64, #5A, #20, #69 }
#macro じゅ { LJ "じゅ", "dZ M", "64,64,0", 4, #64, #5A, #20, #4D }
#macro じぇ { LJ "じぇ", "dZ e", "64,64,0", 4, #64, #5A, #20, #65 }
#macro じょ { LJ "じょ", "dZ o", "64,64,0", 4, #64, #5A, #20, #6F }
#macro た { LJ "た", "t a", "64,0", 3, #74, #20, #61 }
#macro て { LJ "て", "t e", "64,0", 3, #74, #20, #65 }
#macro と { LJ "と", "t o", "64,0", 3, #74, #20, #6F }
#macro ちゃ { LJ "ちゃ", "tS a", "64,64,0", 4, #74, #53, #20, #61 }
#macro ち   { LJ "ち",   "tS i", "64,64,0", 4, #74, #53, #20, #69 }
#macro ちゅ { LJ "ちゅ", "tS u", "64,64,0", 4, #74, #53, #20, #4D }
#macro ちぇ { LJ "ちぇ", "tS e", "64,64,0", 4, #74, #53, #20, #65 }
#macro ちょ { LJ "ちょ", "tS o", "64,64,0", 4, #74, #53, #20, #6F }
#macro つぁ { LJ "つぁ", "ts a", "64,64,0", 4, #74, #73, #20, #61 }
#macro つぃ { LJ "つぃ", "ts i", "64,64,0", 4, #74, #73, #20, #69 }
#macro つ   { LJ "つ",   "ts M", "64,64,0", 4, #74, #73, #20, #4D }
#macro つぇ { LJ "つぇ", "ts e", "64,64,0", 4, #74, #73, #20, #65 }
#macro つぉ { LJ "つぉ", "ts o", "64,64,0", 4, #74, #73, #20, #6F }
#macro てゃ { LJ "てゃ", "t' a", "64,64,0", 4, #74, #27, #20, #61 }
#macro てぃ { LJ "てぃ", "t' i", "64,64,0", 4, #74, #27, #20, #69 }
#macro てゅ { LJ "てゅ", "t' M", "64,64,0", 4, #74, #27, #20, #4D }
#macro てぇ { LJ "てぇ", "t' e", "64,64,0", 4, #74, #27, #20, #65 }
#macro てょ { LJ "てょ", "t' o", "64,64,0", 4, #74, #27, #20, #6F }
#macro だ   { LJ "だ",   "d a", "64,0", 3, #64, #20, #61 }
#macro どぅ { LJ "どぅ", "d M", "64,0", 3, #64, #20, #4D }
#macro で   { LJ "で",   "d e", "64,0", 3, #64, #20, #65 }
#macro ど   { LJ "ど",   "d o", "64,0", 3, #64, #20, #6F }
#macro でゃ { LJ "でゃ", "d' a", "64,64,0", 4, #64, #27, #20, #61 }
#macro でぃ { LJ "でぃ", "d' i", "64,64,0", 4, #64, #27, #20, #69 }
#macro でゅ { LJ "でゅ", "d' M", "64,64,0", 4, #64, #27, #20, #4D }
#macro でぇ { LJ "でぇ", "d' e", "64,64,0", 4, #64, #27, #20, #65 }
#macro でょ { LJ "でょ", "d' o", "64,64,0", 4, #64, #27, #20, #6F }
#macro ぢ { じ }
#macro づ { ず }
#macro な { LJ "な", "n a", "64,0", 3, #6E, #20, #61 }
#macro ぬ { LJ "ぬ", "n M", "64,0", 3, #6E, #20, #4D }
#macro ね { LJ "ね", "n e", "64,0", 3, #6E, #20, #65 }
#macro の { LJ "の", "n o", "64,0", 3, #6E, #20, #6F }
#macro にゃ { LJ "にゃ", "J a", "64,0", 3, #4A, #20, #61 }
#macro に   { LJ "に",   "J i", "64,0", 3, #4A, #20, #69 }
#macro にゅ { LJ "にゅ", "J M", "64,0", 3, #4A, #20, #4D }
#macro にぇ { LJ "にぇ", "J e", "64,0", 3, #4A, #20, #65 }
#macro にょ { LJ "にょ", "J o", "64,0", 3, #4A, #20, #6F }
// word continuator (N/A in eVocaloid)
#macro _は { LJ "は", "h\\ a", "64,0", 4, #68, #5C, #20, #61 }
#macro _へ { LJ "へ", "h\\ e", "64,0", 4, #68, #5C, #20, #65 }
#macro _ほ { LJ "ほ", "h\\ o", "64,0", 4, #68, #5C, #20, #6F }
// word-initiator
#macro は { LJ "は", "h a", "64,0", 3, #68, #20, #61 }
#macro へ { LJ "へ", "h e", "64,0", 3, #68, #20, #65 }
#macro ほ { LJ "ほ", "h o", "64,0", 3, #68, #20, #6F }
#macro ひゃ { LJ "ひゃ", "C a", "64,0", 3, #43, #20, #61 }
#macro ひ   { LJ "ひ",   "C i", "64,0", 3, #43, #20, #69 }
#macro ひゅ { LJ "ひゅ", "C M", "64,0", 3, #43, #20, #4D }
#macro ひぇ { LJ "ひぇ", "C e", "64,0", 3, #43, #20, #65 }
#macro ひょ { LJ "ひょ", "C o", "64,0", 3, #43, #20, #6F }
#macro ふぁ { LJ "ふぁ", "p\\ a", "64,64,0", 4, #70, #5C, #20, #61 }
#macro ふ   { LJ "ふ",   "p\\ M", "64,64,0", 4, #70, #5C, #20, #4D }
#macro ふぇ { LJ "ふぇ", "p\\ e", "64,64,0", 4, #70, #5C, #20, #65 }
#macro ふぉ { LJ "ふぉ", "p\\ o", "64,64,0", 4, #70, #5C, #20, #6F }
#macro ふゃ { LJ "ふゃ", "p\\' a", "64,64,64,0", 5, #70, #5C, #27, #20, #61 }
#macro ふぃ { LJ "ふぃ", "p\\' i", "64,64,64,0", 5, #70, #5C, #27, #20, #69 }
#macro ふゅ { LJ "ふゅ", "p\\' M", "64,64,64,0", 5, #70, #5C, #27, #20, #4D }
#macro ば { LJ "ば", "b a", "64,0", 3, #62, #20, #61 }
#macro ぶ { LJ "ぶ", "b M", "64,0", 3, #62, #20, #4D }
#macro べ { LJ "べ", "b e", "64,0", 3, #62, #20, #65 }
#macro ぼ { LJ "ぼ", "b o", "64,0", 3, #62, #20, #6F }
#macro びゃ { LJ "びゃ", "b' a", "64,64,0", 4, #62, #27, #20, #61 }
#macro び   { LJ "び",   "b' i", "64,64,0", 4, #62, #27, #20, #69 }
#macro びゅ { LJ "びゅ", "b' M", "64,64,0", 4, #62, #27, #20, #4D }
#macro びぇ { LJ "びぇ", "b' e", "64,64,0", 4, #62, #27, #20, #65 }
#macro びょ { LJ "びょ", "b' o", "64,64,0", 4, #62, #27, #20, #6F }
#macro ぱ { LJ "ぱ", "p a", "64,0", 3, #70, #20, #61 }
#macro ぷ { LJ "ぷ", "p M", "64,0", 3, #70, #20, #4D }
#macro ぺ { LJ "ぺ", "p e", "64,0", 3, #70, #20, #65 }
#macro ぽ { LJ "ぽ", "p o", "64,0", 3, #70, #20, #6F }
#macro ぴゃ { LJ "ぴゃ", "p' a", "64,64,0", 4, #70, #27, #20, #61 }
#macro ぴ   { LJ "ぴ",   "p' i", "64,64,0", 4, #70, #27, #20, #69 }
#macro ぴゅ { LJ "ぴゅ", "p' M", "64,64,0", 4, #70, #27, #20, #4D }
#macro ぴぇ { LJ "ぴぇ", "p' e", "64,64,0", 4, #70, #27, #20, #65 }
#macro ぴょ { LJ "ぴょ", "p' o", "64,64,0", 4, #70, #27, #20, #6F }
#macro ま { LJ "ま", "m a", "64,0", 3, #6D, #20, #61 }
#macro む { LJ "む", "m M", "64,0", 3, #6D, #20, #4D }
#macro め { LJ "め", "m e", "64,0", 3, #6D, #20, #65 }
#macro も { LJ "も", "m o", "64,0", 3, #6D, #20, #6F }
#macro みゃ { LJ "みゃ", "m' a", "64,64,0", 4, #6D, #27, #20, #61 }
#macro み   { LJ "み", "m' i", "64,64,0", 4, #6D, #27, #20, #69 }
#macro みゅ { LJ "みゅ", "m' M", "64,64,0", 4, #6D, #27, #20, #4D }
#macro みぇ { LJ "みぇ", "m' e", "64,64,0", 4, #6D, #27, #20, #65 }
#macro みょ { LJ "みょ", "m' o", "64,64,0", 4, #6D, #27, #20, #6F }
#macro や { LJ "や", "j a", "64,0", 3, #6A, #20, #61 }
#macro ゆ { LJ "ゆ", "j u", "64,0", 3, #6A, #20, #75 }
#macro よ { LJ "よ", "j o", "64,0", 3, #6A, #20, #6F }
#macro ら { LJ "ら", "4 a", "64,0", 3, #34, #20, #61 }
#macro る { LJ "る", "4 M", "64,0", 3, #34, #20, #4D }
#macro れ { LJ "れ", "4 e", "64,0", 3, #34, #20, #65 }
#macro ろ { LJ "ろ", "4 o", "64,0", 3, #34, #20, #6F }
#macro りゃ { LJ "りゃ", "4' a", "64,64,0", 4, #34, #27, #20, #61 }
#macro り   { LJ "り",   "4' i", "64,64,0", 4, #34, #27, #20, #69 }
#macro りゅ { LJ "りゅ", "4' M", "64,64,0", 4, #34, #27, #20, #4D }
#macro りぇ { LJ "りぇ", "4' e", "64,64,0", 4, #34, #27, #20, #65 }
#macro りょ { LJ "りょ", "4' o", "64,64,0", 4, #34, #27, #20, #6F }
#macro わ { LJ "わ", "w a", "64,0", 3, #77, #20, #61 }
#macro を { LJ "を", "o", "0", 1, #6F }
#macro ん { LJ "ん", "N", "64", 1, #4E }
// FIXME: for eVocaloid, ん has a lot of variants depending on the *next* phonetics:
//	- N\ for ending form
//	- N\ before vowel, semi-vowel or fricatives
//	- m before p, b or m
//	- m' before p', b' or m'
//	- N before k, g or N
//	- N' before k' g' or N'
//	- J before J
//	- n for anything else
// FIXME: are んま-んも defined differently? Or are they different in Luka?

// 長音
#macro __あ label:string { LJ $label, "a", "0", 1, #61 }
#macro __い label:string { LJ $label, "i", "0", 1, #69 }
#macro __う label:string { LJ $label, "M", "0", 1, #4D }
#macro __え label:string { LJ $label, "e", "0", 1, #65 }
#macro __お label:string { LJ $label, "o", "0", 1, #6F }
#macro __keep_vowel label:string { __APPLY { $__prev_vowel \<= #4D ? "__う", { $__prev_vowel \<=#61 ? "__あ", { $__prev_vowel \<=#65 ? "__え", { $__prev_vowel \<= #69 ? "__い", "__お" } } }, $label } }
// 促音
#macro っ { __keep_vowel "っ" }
#macro っ_ { } // do nothing, skipping note
#macro ー { __keep_vowel "ー" } // it'd be more frequently used
#macro ー_ { } // do nothing, implying the same note holds
// for natural notation (eg. ue-wo-mu-i-te a-ruko--'u' / wa-ta-shi-no-se-'i'-ja-na-i)
#macro あ_ { __keep_vowel "あ" }
#macro い_ { __keep_vowel "い" }
#macro う_ { __keep_vowel "う" }
#macro え_ { __keep_vowel "え" }
#macro お_ { __keep_vowel "お" }
// the same as ー_ (the same note holds), but with hiraganas for natural notation
#macro あ__ { }
#macro い__ { }
#macro う__ { }
#macro え__ { }
#macro お__ { }

// complemental natural Japanese notation support.
// They are copy of わ and え (except for the labels).
#macro _は_ { LJ "は", "w a", "64,0", 3, #77, #20, #61 }
#macro _へ_ { LJ "え", "e", "0", 1, #65 }

// FIXME: Katakanas!


// Lyrics macro for Taiwanese (Bopomofos) ----

#macro ㄅ { LBC "ㄅ", "p" }
#macro ㄆ { LBC "ㄆ", "p_h" }
#macro ㄇ { LBC "ㄇ", "m" }
#macro ㄈ { LBC "ㄈ", "f" }
#macro ㄉ { LBC "ㄉ", "t" }
#macro ㄊ { LBC "ㄊ", "t_h" }
#macro ㄋ { LBC "ㄋ", "n" }
#macro ㄌ { LBC "ㄌ", "l" }
#macro ㄍ { LBC "ㄍ", "k" }
#macro ㄎ { LBC "ㄎ", "k_h" }
#macro ㄏ { LBC "ㄏ", "x" }
#macro ㄐ { LBC "ㄐ", "ts\\" }
#macro ㄑ { LBC "ㄑ", "ts\\_h" }
#macro ㄒ { LBC "ㄒ", "s\\" }
#macro ㄓ { LBC "ㄓ", "ts`i`" }
#macro ㄔ { LBC "ㄔ", "ts`_hi`" }
#macro ㄕ { LBC "ㄕ", "s`i`" }
#macro ㄖ { LBC "ㄖ", "z`i`" }
#macro ㄗ { LBC "ㄗ", "tsi\\" }
#macro ㄘ { LBC "ㄘ", "ts_hi\\" }
#macro ㄙ { LBC "ㄙ", "si\\" }

#macro ㄚ { LBV "ㄚ", "a" }
#macro ㄛ { LBV "ㄛ", "o" }
#macro ㄜ { LBV "ㄜ", "7" }
#macro ㄧ { LBV "ㄧ", "i" }
#macro ㄨ { LBV "ㄨ", "u" }
#macro ㄩ { LBV "ㄩ", "y" }
#macro ㄦ { LBV "ㄦ", "@`" }
#macro ㄞ { LBV "ㄞ", "aI" }
#macro ㄟ { LBV "ㄟ", "ei" }
#macro ㄠ { LBV "ㄠ", "AU" }
#macro ㄡ { LBV "ㄡ", "@U" }
#macro ㄧㄚ { LBV "ㄧㄚ", "ia" }
#macro ㄧㄝ { LBV "ㄧㄝ", "iE_r" }
#macro ㄨㄚ { LBV "ㄨㄚ", "ua" }
#macro ㄨㄛ { LBV "ㄨㄛ", "uo" }
#macro ㄩㄝ { LBV "ㄩㄝ", "yE_r" }
#macro ㄧㄠ { LBV "ㄧㄠ", "iAU" }
#macro ㄧㄡ { LBV "ㄧㄡ", "i@U" }
#macro ㄨㄞ { LBV "ㄨㄞ", "uaI" }
#macro ㄨㄟ { LBV "ㄨㄟ", "uei" }
#macro ㄢ { LBV "ㄢ", "a_n" }
#macro ㄣ { LBV "ㄣ", "@_n" }
#macro ㄧㄣ { LBV "ㄧㄣ", "i_n" }
#macro ㄧㄢ { LBV "ㄧㄢ", "iE_n" }
#macro ㄨㄢ { LBV "ㄨㄢ", "ua_n" }
#macro ㄨㄣ { LBV "ㄨㄣ", "u@_n" }
#macro ㄩㄣ { LBV "ㄩㄣ", "y_n" }
#macro ㄩㄢ { LBV "ㄩㄢ", "y{_n" }
#macro ㄤ { LBV "ㄤ", "AN" }
#macro ㄥ { LBV "ㄥ", "@N" }
#macro ㄧㄥ { LBV "ㄧㄥ", "iN" }
#macro ㄧㄤ { LBV "ㄧㄤ", "iAN" }
#macro ㄨㄤ { LBV "ㄨㄤ", "uAN" }
// FIXME: this must be conditional. U@N without consonant, UN with consonant.
// This distinction should be done automatically.
// Differentiating with ‘_' is kind of stupid.
#macro ㄨㄥ { LBV "ㄨㄥ", "UN" }
#macro _ㄨㄥ { LBV "ㄨㄥ", "u@N" }
#macro ㄩㄥ { LBV "ㄩㄥ", "iUN" }
